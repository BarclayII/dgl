namespace dgl {

namespace sampling {

struct NodeFlowFrontier : public runtime::Object {
  /*! \brief The graph.  Node ID space is the same as parent graph. */
  HeteroGraphPtr graph;
  /*!
   * \brief The induced node ids.
   * \note This is also a map from the new node id to the node id in the parent graph.
   */
  IdArray induced_nodes;
  /*!
   * \brief The induced edge ids.
   * \note This is also a map from the new edge id to the edge id in the parent graph.
   */
  IdArray induced_edges;
  /*!
   * \brief Any additional data generated by sampler.
   */
  Map<std::string, runtime::NDArray> data;

  static constexpr const char* _type_key = "sampler.NodeFlowFrontier";
  DGL_DECLARE_OBJECT_TYPE_INFO(NodeFlowFrontier, runtime::Object);
};
typedef std::shared_ptr<NodeFlowFrontier> NodeFlowFrontierPtr;
DGL_DEFINE_OBJECT_REF(NodeFlowFrontierRef, NodeFlowFrontier);

};  // namespace sampling

};  // namespace dgl
